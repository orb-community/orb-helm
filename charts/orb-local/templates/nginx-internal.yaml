# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
data:
  dhparam.pem: LS0tLS1CRUdJTiBESCBQQVJBTUVURVJTLS0tLS0KTUlJQkNBS0NBUUVBcXVOOE5SY1NkTE9NOVJpdW1xV0g4SnczQ0dWUi9lUVFlcStqdlQzenB4bFVRUEFNRXhRYgpNUkNzcG0xb1JnRFdHdmNoM1o0emZNbUJaeXpLSkE0QkRUaDRVU3pjRTV6dm54OGFVY1VQWlBRcHdTaWNLZ3piClFHbmwwWGYvNzVHQVdyd2h4bjhHTnlNUDI5d3JwY2QxUWc4ZkVRM0hBVzFmQ2Q5Z2lyS01LWTlhQmFIbGkvaDIKUjlSZC9LVGJlcU44OGFvTWpVdlpIb29JSVpYdTBBK2t5dWxPYWpZUU80azNTcDZDQnF2MEZGY29MUW5ZTkgxMwprTVVFNXFKNjhVNzMySHliVHc4c29mVENPeEtjQ2ZNMmtWUDdkVm9GM3BybEdqVXczejNsM1NUWTh2dVRkcTBCClI3UHNsa29RSE5tcWNMKzJnb3VvV1AzR0krSWVSekdTU3dJQkFnPT0KLS0tLS1FTkQgREggUEFSQU1FVEVSUy0tLS0t
kind: Secret
metadata:
  name: {{ .Release.Name }}-nginx-internal-dhparam
type: Opaque
---
apiVersion: v1
data:
  nginx.conf: |-
    user nginx;
    worker_processes auto;
    pid /run/nginx.pid;
    load_module /etc/nginx/modules/ngx_stream_js_module.so;
    load_module /etc/nginx/modules/ngx_http_js_module.so;
    include /etc/nginx/modules-enabled/*.conf;

    events {
      worker_connections 10240; #safe for production
    }
    
    # metrics
    http {
      include         /etc/nginx/mime.types;        
      server {
            listen 8080;          
            location /stub_status {
              stub_status on;
            }
      }
    }
    # MQTT
    stream {
      #js_include authorization.js;
      # MQTT
      server {  
          listen 8883 ssl;
          listen [::]:8883 ssl;

          # These paths are set to its default values as
          # a volume in the docker/docker-compose.yml file.
          ssl_certificate /etc/ssl/certs/orb/tls.crt;
          ssl_certificate_key /etc/ssl/certs/orb/tls.key;
          #ssl_client_certificate /etc/ssl/certs/ca.crt;
          # FIXME
          # ssl_crl /etc/ssl/certs/crl.pem;
          #ssl_verify_client on;
          #ssl_verify_depth 2;
          ssl_dhparam /etc/ssl/certs/dhparam.pem;

          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
          ssl_ecdh_curve secp384r1;
          ssl_session_tickets off;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
          resolver_timeout 5s;
          js_preread authenticate;

          proxy_pass {{ .Release.Name }}-envoy:1883;
      }

      log_format access_log_format '$protocol '
        '$remote_addr: '
        'status=$status; upstream connect time=$upstream_connect_time';
      access_log /var/log/nginx/access.log access_log_format;
      error_log  /var/log/nginx/error.log debug;

    }

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-config
---
apiVersion: v1
data:
  authorization.js: |-
    var clientKey = '';

    // Check certificate MQTTS.
    function authenticate(s) {
      if (!s.variables.ssl_client_s_dn || !s.variables.ssl_client_s_dn.length ||
        !s.variables.ssl_client_verify || s.variables.ssl_client_verify != "SUCCESS") {
        s.deny();
        return;
      }

      s.on('upload', function (data) {
        if (data == '') {
          return;
        }

        var packet_type_flags_byte = data.codePointAt(0);
        // First MQTT packet contain message type and flags. CONNECT message type
        // is encoded as 0001, and we're not interested in flags, so only values
        // 0001xxxx (which is between 16 and 32) should be checked.
        if (packet_type_flags_byte < 16 || packet_type_flags_byte >= 32) {
          s.off('upload');
          s.allow();
          return;
        }

        if (clientKey === '') {
          clientKey = parseCert(s.variables.ssl_client_s_dn, 'CN');
        }

        var pass = parsePackage(s, data);

        if (!clientKey.length || pass !== clientKey) {
          s.error('Cert CN (' + clientKey + ') does not match client password');
          s.off('upload')
          s.deny();
          return;
        }

        s.off('upload');
        s.allow();
      })
    }

    function parsePackage(s, data) {
      // An explanation of MQTT packet structure can be found here:
      // https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#msg-format.

      // CONNECT message is explained here:
      // https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect.

      /*
        0               1               2               3
        7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        | TYPE | RSRVD | REMAINING LEN |      PROTOCOL NAME LEN       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                        PROTOCOL NAME                        |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
        |    VERSION   |     FLAGS     |          KEEP ALIVE          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
        |                     Payload (if any) ...                    |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        First byte with remaining length represents fixed header.
        Remaining Length is the length of the variable header (10 bytes) plus the length of the Payload.
        It is encoded in the manner described here:
        http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836.

        Connect flags byte looks like this:
        |       7       |       6       |       5     |   4  3   |     2     |       1       |     0     |
        | Username Flag | Password Flag | Will Retain | Will QoS | Will Flag | Clean Session | Reserved  |

        The payload is determined by the flags and comes in this order:
          1. Client ID (2 bytes length + ID value)
          2. Will Topic (2 bytes length + Will Topic value) if Will Flag is 1.
          3. Will Message (2 bytes length + Will Message value) if Will Flag is 1.
          4. User Name (2 bytes length + User Name value) if User Name Flag is 1.
          5. Password (2 bytes length + Password value) if Password Flag is 1.

        This method extracts Password field.
      */

      // Extract variable length header. It's 1-4 bytes. As long as continuation byte is
      // 1, there are more bytes in this header. This algorithm is explained here:
      // http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836
      var len_size = 1;
      for (var remaining_len = 1; remaining_len < 5; remaining_len++) {
        if (data.codePointAt(remaining_len) > 128) {
          len_size += 1;
          continue;
        }
        break;
      }

      // CONTROL(1) + MSG_LEN(1-4) + PROTO_NAME_LEN(2) + PROTO_NAME(4) + PROTO_VERSION(1)
      var flags_pos = 1 + len_size + 2 + 4 + 1;
      var flags = data.codePointAt(flags_pos);

      // If there are no username and password flags (11xxxxxx), return.
      if (flags < 192) {
        s.error('MQTT username or password not provided');
        return '';
      }

      // FLAGS(1) + KEEP_ALIVE(2)
      var shift = flags_pos + 1 + 2;

      // Number of bytes to encode length.
      var len_bytes_num = 2;

      // If Wil Flag is present, Will Topic and Will Message need to be skipped as well.
      var shift_flags = 196 <= flags ? 5 : 3;
      var len_msb, len_lsb, len;

      for (var i = 0; i < shift_flags; i++) {
        len_msb = data.codePointAt(shift).toString(16);
        len_lsb = data.codePointAt(shift + 1).toString(16);
        len = calcLen(len_msb, len_lsb);
        shift += len_bytes_num;
        if (i != shift_flags - 1) {
          shift += len;
        }
      }

      var password = data.substring(shift, shift + len);
      return password;
    }

    // Check certificate HTTPS and WSS.
    function setKey(r) {
      if (clientKey === '') {
        clientKey = parseCert(r["headersIn"]["ssl-client-subject-dn"], 'CN');
      }
      var auth = r.headersIn['Authorization'];
      if (auth && auth.length && auth != clientKey) {
        r.error('Authorization header does not match certificate');
        return '';
      }

      return clientKey;
    }

    function calcLen(msb, lsb) {
      if (lsb < 2) {
        lsb = '0' + lsb;
      }

      return parseInt(msb + lsb, 16);
    }

    function parseCert(cert, key) {
      if (cert && cert.length) {
        var pairs = cert.split(',');
        for (var i = 0; i < pairs.length; i++) {
          var pair = pairs[i].split('=');
          if (pair[0].toUpperCase() == key) {
            return pair[1];
          }
        }
      }

      return '';
    }

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-authorization
---
{{- if .Values.nginx_internal.kindDeploy }}
apiVersion: v1
data:
  tls.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIDjzCCAnegAwIBAgIUQ1AagVQXCuOIzmGXm+KhsbyBc18wDQYJKoZIhvcNAQEN
    BQAwVzESMBAGA1UEAwwJbG9jYWxob3N0MREwDwYDVQQKDAhNYWluZmx1eDEMMAoG
    A1UECwwDSW9UMSAwHgYJKoZIhvcNAQkBFhFpbmZvQG1haW5mbHV4LmNvbTAeFw0x
    OTA0MDEwOTI3MDFaFw0yMjAzMzEwOTI3MDFaMFcxEjAQBgNVBAMMCWxvY2FsaG9z
    dDERMA8GA1UECgwITWFpbmZsdXgxDDAKBgNVBAsMA0lvVDEgMB4GCSqGSIb3DQEJ
    ARYRaW5mb0BtYWluZmx1eC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
    AoIBAQCq6O4PHwgGOmEafjea5KocG80GYSYbvN37ums6fQ1wcmCxn8LtZek8WkfJ
    S2NQQPDvn8QWRY7aUkTAW7cEB4vxpT25bevP7KJNFAS8XZO7NTfF8fscJS+YWSXz
    VS0OFZ2YuqTnjCiqWf5mvjAkkXBGIYq+k2ONM1tHlEA0lzbLun2a9H/XarCG+znj
    pfYpW6R08zFzXyGb4sI2pyYpP7iZLla7PTSZTt9h6jkY3qqMDhEHhPdlXDhO1O9/
    lA8yWMO9vKCzC7ngDXnV99Nl+tFhp9z9VkTUveLMuN9+riDJRfP25fOzHuRYzmsR
    emYjD1NvSgsvFqSbFDVXB8kcyrXPAgMBAAGjUzBRMB0GA1UdDgQWBBRs4xR91qEj
    NRGmw391xS7x6Tc+8jAfBgNVHSMEGDAWgBRs4xR91qEjNRGmw391xS7x6Tc+8jAP
    BgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4IBAQAAPMf7bVFhzUG8AYq0
    VS9BWVwVtdNzZ3X9FkG9O+tZZO43GlaToym8PmhJHF9wk3AA+pmgfcmBrHcTG0me
    PeincN2euO0c4iv1f/i4bAY5/iq/Q0w/GiuTL5VLVpaH1SQrWhc0ZD7Ii+lVPpFQ
    bJXKHFQBnZU7mWeQnL9W1SVhWfsSKShBkAEUeGXo3YMC7nYsFJkl/heC3sYqfrW4
    7fq80u+TU6HjGetSAWKacae7eeNmprMn0lFw2VqPQG3M4M0l9pEfcrRygOAnqNKO
    aNi2UYKBla3XeDjObovOsXRScTKmJZwJ/STJlu+x5UAwF34ZBJy0O2qdd+kOxAhj
    5Yq2
    -----END CERTIFICATE-----

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-tls-crt
---
apiVersion: v1
data:
  tls.key: |-
    -----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCq6O4PHwgGOmEa
    fjea5KocG80GYSYbvN37ums6fQ1wcmCxn8LtZek8WkfJS2NQQPDvn8QWRY7aUkTA
    W7cEB4vxpT25bevP7KJNFAS8XZO7NTfF8fscJS+YWSXzVS0OFZ2YuqTnjCiqWf5m
    vjAkkXBGIYq+k2ONM1tHlEA0lzbLun2a9H/XarCG+znjpfYpW6R08zFzXyGb4sI2
    pyYpP7iZLla7PTSZTt9h6jkY3qqMDhEHhPdlXDhO1O9/lA8yWMO9vKCzC7ngDXnV
    99Nl+tFhp9z9VkTUveLMuN9+riDJRfP25fOzHuRYzmsRemYjD1NvSgsvFqSbFDVX
    B8kcyrXPAgMBAAECggEAbp/el0MKup1HBRL1gvjHcvI7vwla1VFmje2YQn93F3Wx
    SMeUMH1qfnohRRXa7rNaQIA1OAVF9eKSRcAXsjAAUSUX0tJndGpCk4mFlzcqzF4h
    /6olU45uRDpP6jUTuK4dGCKXYpjCKaGenXo1RzYsafiECd707Qx05Nv8ww2tlifN
    HtUR0xCZfVGDZfmNMZVrksUIZ1XHwZNtNLWQW6MBl3RhFaA0Wz/RfFMi2FzacEbj
    75IqE6PLic1fin6P3GouzKamtZ6YPTyR5PqxCOCw97oZDCUGy2qGyAuPUi9O2HKB
    fQgSyIxuR73S2korvxAmvekubjBFAqhan2oEjZs6oQKBgQDT28COlC33BSrpr2+V
    pZIL4Bb1rGHreTi1M/4n9nP3GOZ9gqnSUsWXyxYVoZ2YfixorjZhUzHyx4SfZ2E9
    p5PkIJ0wOiHLlKQ36vEVN9ZO1UyNCYUgs3seW40xnsAiMNczZjufIZrsejO3tc2j
    Jhgp+B/9Bt5A8us2ewhz3LlQowKBgQDOhQmZAfL/xAjYBCUS73t/YO60i5e1yg2J
    i6jXeKjd5gRZ32upkBzQ8UBvAGSQGqrcCnqIzrU5TeeD046bZzkokg7iKwHwQDrL
    SXTthUB6ABZddP/VXCEUVBer3FEnUgJm9jw08RzmPyNEPjfp91FDmJ9GYcbdo/nL
    hBPHh3lc5QKBgQCJYZ0yWACeiKlVNECFqAJW1Q/Oa+RrkAYn6vlK7NQyTeFZTlvV
    WXtsfXNqv4y0kE037JCy+AIRzzO/MoiqNHsAme2Ukn3LyC3dXOrMuZKtOEAVzTCZ
    Dgoum2up26n4AffrCsZq4J3X7z6OSMR6oX9V5+LGb6e8Mko43/uRNnatRQKBgEMH
    bQkLV+ppnxE1ry7JKcU7Gd7hm9j1/pTRDnj5AZ4b5Peii1ganS+3zdj5QKqA7UnD
    4Od8Z9d0kJr51EReKXAgj9IacWOgBTUr31akNDwkwR2ONubyIw5tCM3QEUr41CzE
    6N+qDl4wyeqBYzZ9/hM5eyCl5ZzUduP2N1FAiER9AoGAW2T0OeM5ZsPABMKu9eEN
    FB9bVysqWT1tExB34OGWrZvNEzsHTqvr/D3KSWv0PS1pM46M1XkVbybOzRmPrzab
    AGMDJXgGhMuk2UtDA/s9mgqTOeDXpvmaFyThVkoH162j6GMuX2SwxHnH9D42zgMR
    3LEZ/5Q5HMJ4jwEM880jvP4=
    -----END PRIVATE KEY-----

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-tls-key
---
{{- end }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  finalizers:
    - kubernetes.io/pvc-protection
  labels:
    app: {{ .Release.Name }}-nginx-internal
  name: {{ .Release.Name }}-nginx-internal-crl-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx-internal
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: nginx-internal
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: nginx-internal
    spec:
      containers:
        - image: "{{ .Values.nginx_internal.image.repository }}:{{ .Values.nginx_internal.image.tag }}"
          # - image: busybox
          #   command: ["sleep", "3600"]
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.nginx_internal.image.imagePullPolicy}}
          name: {{ .Release.Name }}-nginx-internal
          ports:
            - containerPort: 8883
              protocol: TCP
              {{- if .Values.nginx_internal.kindDeploy }}
              hostPort: 8883
              {{- end }}
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/ssl/certs/dhparam.pem
              name: dhparam
              subPath: dhparam.pem
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-config
              subPath: nginx.conf
            - mountPath: /etc/nginx/authorization.js
              name: nginx-authorization
              subPath: authorization.js
            {{- if .Values.nginx_internal.kindDeploy }}
            - mountPath: /etc/ssl/certs/orb/tls.key
              name: tls-key
              subPath:  tls.key
            - mountPath: /etc/ssl/certs/orb/tls.crt
              name: tls-crt
              subPath: tls.crt
            {{- else }}
            - mountPath: /etc/ssl/certs/orb
              name: orb-tls
            {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
        - name: dhparam
          secret:
            defaultMode: 256
            optional: false
            secretName: {{ .Release.Name }}-nginx-internal-dhparam
        - name: nginx-config
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-config
            optional: false
        - name: nginx-authorization
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-authorization
            optional: false
        - name: nginx-crl-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-nginx-internal-crl-volume
        {{- if .Values.nginx_internal.kindDeploy }}
        - name: tls-key
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-tls-key
            optional: false
        - name: tls-crt
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-tls-crt
            optional: false
        {{- else }}
        - name: orb-tls
          secret:
            secretName: {{ .Values.ingress.secret }}
        {{- end }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-nginx-internal
spec:
  selector:
    app: {{ .Release.Name }}
    component: nginx-internal
  ports:
    - port: 8883
      protocol: TCP
      name: mqtt
    - port: 8080
      protocol: TCP
      name: metrics
